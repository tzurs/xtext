/*
 * generated by Xtext
 */
package org.eclipse.xtext.grammarinheritance.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.grammarinheritance.services.InheritanceTestLanguageGrammarAccess;
import org.eclipse.xtext.grammarinheritance.services.BaseInheritanceTestLanguageGrammarAccess;

@Singleton
public class InheritanceTest3LanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.grammarinheritance.InheritanceTest3Language.Model");
		private final RuleCall cModelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model:
		//	super;
		@Override public ParserRule getRule() { return rule; }

		//super
		public RuleCall getModelParserRuleCall() { return cModelParserRuleCall; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.grammarinheritance.InheritanceTest3Language.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cElementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cElementKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cElementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cElementKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		
		//Element:
		//	super | {Element} "element" name=super::ID | {Element} "element" name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//super | {Element} "element" name=super::ID | {Element} "element" name=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//super
		public RuleCall getElementParserRuleCall_0() { return cElementParserRuleCall_0; }

		//{Element} "element" name=super::ID
		public Group getGroup_1() { return cGroup_1; }

		//{Element}
		public Action getElementAction_1_0() { return cElementAction_1_0; }

		//"element"
		public Keyword getElementKeyword_1_1() { return cElementKeyword_1_1; }

		//name=super::ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//super::ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//{Element} "element" name=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{Element}
		public Action getElementAction_2_0() { return cElementAction_2_0; }

		//"element"
		public Keyword getElementKeyword_2_1() { return cElementKeyword_2_1; }

		//name=STRING
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_2_0() { return cNameSTRINGTerminalRuleCall_2_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final TerminalRule tID;
	
	private final Grammar grammar;

	private final InheritanceTestLanguageGrammarAccess gaInheritanceTestLanguage;

	@Inject
	public InheritanceTest3LanguageGrammarAccess(GrammarProvider grammarProvider,
		InheritanceTestLanguageGrammarAccess gaInheritanceTestLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaInheritanceTestLanguage = gaInheritanceTestLanguage;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.grammarinheritance.InheritanceTest3Language.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.grammarinheritance.InheritanceTest3Language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public InheritanceTestLanguageGrammarAccess getInheritanceTestLanguageGrammarAccess() {
		return gaInheritanceTestLanguage;
	}

	
	//Model:
	//	super;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Element:
	//	super | {Element} "element" name=super::ID | {Element} "element" name=STRING;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//terminal ID:
	//	"id";
	public TerminalRule getIDRule() {
		return tID;
	} 

	//Model:
	//	"model" name=ID "{" elements+=Element* "}";
	public InheritanceTestLanguageGrammarAccess.ModelElements getInheritanceTestLanguageModelAccess() {
		return gaInheritanceTestLanguage.getModelAccess();
	}
	
	public ParserRule getInheritanceTestLanguageModelRule() {
		return getInheritanceTestLanguageModelAccess().getRule();
	}

	//Element:
	//	"element" name=ID;
	public InheritanceTestLanguageGrammarAccess.ElementElements getInheritanceTestLanguageElementAccess() {
		return gaInheritanceTestLanguage.getElementAccess();
	}
	
	public ParserRule getInheritanceTestLanguageElementRule() {
		return getInheritanceTestLanguageElementAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public BaseInheritanceTestLanguageGrammarAccess.FQNElements getFQNAccess() {
		return gaInheritanceTestLanguage.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getTerminalsIDRule() {
		return gaInheritanceTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaInheritanceTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaInheritanceTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaInheritanceTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaInheritanceTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaInheritanceTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaInheritanceTestLanguage.getANY_OTHERRule();
	} 
}
