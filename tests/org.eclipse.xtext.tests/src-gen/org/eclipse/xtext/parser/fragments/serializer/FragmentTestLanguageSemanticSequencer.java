/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.fragments.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.FragmentTestLanguagePackage;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.PRFNamed;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.PRFNamedWithAction;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.ParserRuleFragments;
import org.eclipse.xtext.parser.fragments.services.FragmentTestLanguageGrammarAccess;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class FragmentTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FragmentTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FragmentTestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FragmentTestLanguagePackage.PRF_NAMED:
				if(context == grammarAccess.getPRFNamedRefFirstRule()) {
					sequence_PRFNamedRefFirst(context, (PRFNamed) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPRFNamedWithActionInFragment2Rule()) {
					sequence_PRFNamedWithActionInFragment2(context, (PRFNamed) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPRFNamedWithActionInFragment3Rule()) {
					sequence_PRFNamedWithActionInFragment3(context, (PRFNamed) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPRFNamedWithActionInFragmentRule()) {
					sequence_PRFNamedWithActionInFragment(context, (PRFNamed) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPRFNamedWithFQNRule()) {
					sequence_PRFNamedWithFQN(context, (PRFNamed) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPRFNamedRule() ||
				   context == grammarAccess.getPRFNamedWithActionAccess().getPRFNamedWithActionPrevAction_1()) {
					sequence_PRFNamed(context, (PRFNamed) semanticObject); 
					return; 
				}
				else break;
			case FragmentTestLanguagePackage.PRF_NAMED_WITH_ACTION:
				sequence_PRFNamedWithAction(context, (PRFNamedWithAction) semanticObject); 
				return; 
			case FragmentTestLanguagePackage.PARSER_RULE_FRAGMENTS:
				sequence_ParserRuleFragments(context, (ParserRuleFragments) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     ref=[PRFNamed|ID]
	 */
	protected void sequence_PRFNamedRefFirst(EObject context, PRFNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID ref=[PRFNamed|ID]?)
	 */
	protected void sequence_PRFNamedWithActionInFragment2(EObject context, PRFNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ref=[PRFNamed|ID]?
	 */
	protected void sequence_PRFNamedWithActionInFragment3(EObject context, PRFNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ref=[PRFNamed|ID]?
	 */
	protected void sequence_PRFNamedWithActionInFragment(EObject context, PRFNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (prev=PRFNamedWithAction_PRFNamedWithAction_1 name=ID (ref=[PRFNamed|ID] ref2=[PRFNamed|ID])?)
	 */
	protected void sequence_PRFNamedWithAction(EObject context, PRFNamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=FQN ref=[PRFNamed|FQN2]?)
	 */
	protected void sequence_PRFNamedWithFQN(EObject context, PRFNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ref=[PRFNamed|ID]?
	 */
	protected void sequence_PRFNamed(EObject context, PRFNamed semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         element=PRFNamed | 
	 *         (element=PRFNamed ref=[PRFNamed|ID]) | 
	 *         element=PRFNamedRefFirst | 
	 *         element=PRFNamedWithAction | 
	 *         element=PRFNamedWithActionInFragment | 
	 *         element=PRFNamedWithActionInFragment2 | 
	 *         element=PRFNamedWithActionInFragment3 | 
	 *         element=PRFNamedWithFQN
	 *     )
	 */
	protected void sequence_ParserRuleFragments(EObject context, ParserRuleFragments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
