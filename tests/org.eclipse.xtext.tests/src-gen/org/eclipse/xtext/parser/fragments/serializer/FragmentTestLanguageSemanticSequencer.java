/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.fragments.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.FragmentTestLanguagePackage;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.Fragments;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.Named;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.NamedWithAction;
import org.eclipse.xtext.parser.fragments.services.FragmentTestLanguageGrammarAccess;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FragmentTestLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FragmentTestLanguageGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FragmentTestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FragmentTestLanguagePackage.FRAGMENTS:
				sequence_Fragments(context, (Fragments) semanticObject); 
				return; 
			case FragmentTestLanguagePackage.NAMED:
				if(context == grammarAccess.getFragmentWithAction3Rule() ||
				   context == grammarAccess.getFragmentWithAction3Access().getNamedWithActionPrevAction_1_0()) {
					sequence_FragmentWithAction3(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragment3Rule()) {
					sequence_FragmentWithAction3_NamedWithActionInFragment3(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFragmentWithActionAccess().getNamedWithActionPrevAction_1()) {
					sequence_FragmentWithAction_NamedWithAction_1(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedFragmentRule()) {
					sequence_NamedFragment(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedRefFirstRule()) {
					sequence_NamedFragment_NamedRefFirst(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedRefRule()) {
					sequence_NamedRef(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedRule() ||
				   context == grammarAccess.getNamedWithActionAccess().getNamedWithActionPrevAction_1()) {
					sequence_Named_NamedFragment_NamedRef(context, (Named) semanticObject); 
					return; 
				}
				else break;
			case FragmentTestLanguagePackage.NAMED_WITH_ACTION:
				if(context == grammarAccess.getFragmentWithAction2Rule()) {
					sequence_FragmentWithAction2(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragment2Rule()) {
					sequence_FragmentWithAction2_NamedWithActionInFragment2(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFragmentWithAction3Rule() ||
				   context == grammarAccess.getFragmentWithAction3Access().getNamedWithActionPrevAction_1_0()) {
					sequence_FragmentWithAction3(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragment3Rule()) {
					sequence_FragmentWithAction3_NamedWithActionInFragment3(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFragmentWithActionRule()) {
					sequence_FragmentWithAction(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragmentRule()) {
					sequence_FragmentWithAction_NamedWithActionInFragment(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionRule()) {
					sequence_NamedWithAction(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (prev=FragmentWithAction2_NamedWithAction_0 name=ID ref2=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction2(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID prev=FragmentWithAction2_NamedWithAction_0 name=ID ref2=[Named|ID]? ref=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction2_NamedWithActionInFragment2(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FragmentWithAction3(EObject context, Named semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (prev=FragmentWithAction3_NamedWithAction_1_0 name=ID ref2=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction3(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID ref=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction3_NamedWithActionInFragment3(EObject context, Named semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (prev=FragmentWithAction3_NamedWithAction_1_0 name=ID ref2=[Named|ID]? ref=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction3_NamedWithActionInFragment3(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (prev=FragmentWithAction_NamedWithAction_1 name=ID ref2=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (prev=FragmentWithAction_NamedWithAction_1 name=ID ref2=[Named|ID]? ref=[Named|ID]?)
	 */
	protected void sequence_FragmentWithAction_NamedWithActionInFragment(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FragmentWithAction_NamedWithAction_1(EObject context, Named semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         element=Named | 
	 *         (element=Named ref=[Named|ID]) | 
	 *         element=NamedRefFirst | 
	 *         element=NamedWithAction | 
	 *         element=NamedWithActionInFragment | 
	 *         element=NamedWithActionInFragment2 | 
	 *         element=NamedWithActionInFragment3
	 *     )
	 */
	protected void sequence_Fragments(EObject context, Fragments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_NamedFragment(EObject context, Named semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ref=[Named|ID] name=ID)
	 */
	protected void sequence_NamedFragment_NamedRefFirst(EObject context, Named semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__REF));
			if(transientValues.isValueTransient(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNamedRefFirstAccess().getRefNamedIDTerminalRuleCall_0_0_1(), semanticObject.getRef());
		feeder.accept(grammarAccess.getNamedFragmentAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ref=[Named|ID]
	 */
	protected void sequence_NamedRef(EObject context, Named semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (prev=NamedWithAction_NamedWithAction_1 name=ID (ref=[Named|ID] ref2=[Named|ID])?)
	 */
	protected void sequence_NamedWithAction(EObject context, NamedWithAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID ref=[Named|ID])
	 */
	protected void sequence_Named_NamedFragment_NamedRef(EObject context, Named semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__REF));
			if(transientValues.isValueTransient(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FragmentTestLanguagePackage.Literals.NAMED__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNamedFragmentAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNamedRefAccess().getRefNamedIDTerminalRuleCall_0_1(), semanticObject.getRef());
		feeder.finish();
	}
}
