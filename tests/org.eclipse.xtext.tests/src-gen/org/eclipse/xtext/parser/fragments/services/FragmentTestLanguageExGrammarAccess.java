/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.fragments.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.parser.fragments.services.FragmentTestLanguageGrammarAccess;

@Singleton
public class FragmentTestLanguageExGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ParserRuleFragmentsExElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguageEx.ParserRuleFragmentsEx");
		private final RuleCall cParserRuleFragmentsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParserRuleFragmentsEx returns ParserRuleFragments:
		//	ParserRuleFragments;
		@Override public ParserRule getRule() { return rule; }

		//ParserRuleFragments
		public RuleCall getParserRuleFragmentsParserRuleCall() { return cParserRuleFragmentsParserRuleCall; }
	}
	
	
	private final ParserRuleFragmentsExElements pParserRuleFragmentsEx;
	
	private final Grammar grammar;

	private final FragmentTestLanguageGrammarAccess gaFragmentTestLanguage;

	@Inject
	public FragmentTestLanguageExGrammarAccess(GrammarProvider grammarProvider,
		FragmentTestLanguageGrammarAccess gaFragmentTestLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaFragmentTestLanguage = gaFragmentTestLanguage;
		this.pParserRuleFragmentsEx = new ParserRuleFragmentsExElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.fragments.FragmentTestLanguageEx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public FragmentTestLanguageGrammarAccess getFragmentTestLanguageGrammarAccess() {
		return gaFragmentTestLanguage;
	}

	
	//ParserRuleFragmentsEx returns ParserRuleFragments:
	//	ParserRuleFragments;
	public ParserRuleFragmentsExElements getParserRuleFragmentsExAccess() {
		return pParserRuleFragmentsEx;
	}
	
	public ParserRule getParserRuleFragmentsExRule() {
		return getParserRuleFragmentsExAccess().getRule();
	}

	//ParserRuleFragments:
	//	{ParserRuleFragments} ("#1" element=PRFNamed | "#2" element=PRFNamed "->" ref=[PRFNamed] | "#3"
	//	element=PRFNamedRefFirst | "#4" element=PRFNamedWithAction | "#5" element=PRFNamedWithActionInFragment | "#6"
	//	element=PRFNamedWithActionInFragment2 | "#7" element=PRFNamedWithActionInFragment3);
	public FragmentTestLanguageGrammarAccess.ParserRuleFragmentsElements getParserRuleFragmentsAccess() {
		return gaFragmentTestLanguage.getParserRuleFragmentsAccess();
	}
	
	public ParserRule getParserRuleFragmentsRule() {
		return getParserRuleFragmentsAccess().getRule();
	}

	//PRFNamed:
	//	PRFNamedFragment (":" ref=[PRFNamed] | "-" PRFNamedRef)?;
	public FragmentTestLanguageGrammarAccess.PRFNamedElements getPRFNamedAccess() {
		return gaFragmentTestLanguage.getPRFNamedAccess();
	}
	
	public ParserRule getPRFNamedRule() {
		return getPRFNamedAccess().getRule();
	}

	//PRFNamedRefFirst returns PRFNamed:
	//	ref=[PRFNamed] "<-" PRFNamedFragment;
	public FragmentTestLanguageGrammarAccess.PRFNamedRefFirstElements getPRFNamedRefFirstAccess() {
		return gaFragmentTestLanguage.getPRFNamedRefFirstAccess();
	}
	
	public ParserRule getPRFNamedRefFirstRule() {
		return getPRFNamedRefFirstAccess().getRule();
	}

	//PRFNamedWithAction returns PRFNamed:
	//	PRFNamed {PRFNamedWithAction.prev=current} name=ID (ref=[PRFNamed] ref2=[PRFNamed])?;
	public FragmentTestLanguageGrammarAccess.PRFNamedWithActionElements getPRFNamedWithActionAccess() {
		return gaFragmentTestLanguage.getPRFNamedWithActionAccess();
	}
	
	public ParserRule getPRFNamedWithActionRule() {
		return getPRFNamedWithActionAccess().getRule();
	}

	//PRFNamedWithActionInFragment returns PRFNamed:
	//	FragmentWithAction ("-" ref=[PRFNamed])?;
	public FragmentTestLanguageGrammarAccess.PRFNamedWithActionInFragmentElements getPRFNamedWithActionInFragmentAccess() {
		return gaFragmentTestLanguage.getPRFNamedWithActionInFragmentAccess();
	}
	
	public ParserRule getPRFNamedWithActionInFragmentRule() {
		return getPRFNamedWithActionInFragmentAccess().getRule();
	}

	//PRFNamedWithActionInFragment2 returns PRFNamed:
	//	name=ID FragmentWithAction2 ("-" ref=[PRFNamed])?;
	public FragmentTestLanguageGrammarAccess.PRFNamedWithActionInFragment2Elements getPRFNamedWithActionInFragment2Access() {
		return gaFragmentTestLanguage.getPRFNamedWithActionInFragment2Access();
	}
	
	public ParserRule getPRFNamedWithActionInFragment2Rule() {
		return getPRFNamedWithActionInFragment2Access().getRule();
	}

	//PRFNamedWithActionInFragment3 returns PRFNamed:
	//	FragmentWithAction3 ("-" ref=[PRFNamed])?;
	public FragmentTestLanguageGrammarAccess.PRFNamedWithActionInFragment3Elements getPRFNamedWithActionInFragment3Access() {
		return gaFragmentTestLanguage.getPRFNamedWithActionInFragment3Access();
	}
	
	public ParserRule getPRFNamedWithActionInFragment3Rule() {
		return getPRFNamedWithActionInFragment3Access().getRule();
	}

	//fragment FragmentWithAction returns PRFNamed:
	//	name=ID {PRFNamedWithAction.prev=current} name=ID ref2=[PRFNamed]?;
	public FragmentTestLanguageGrammarAccess.FragmentWithActionElements getFragmentWithActionAccess() {
		return gaFragmentTestLanguage.getFragmentWithActionAccess();
	}
	
	public ParserRule getFragmentWithActionRule() {
		return getFragmentWithActionAccess().getRule();
	}

	//fragment FragmentWithAction2 returns PRFNamed:
	//	{PRFNamedWithAction.prev=current} name=ID ref2=[PRFNamed]?;
	public FragmentTestLanguageGrammarAccess.FragmentWithAction2Elements getFragmentWithAction2Access() {
		return gaFragmentTestLanguage.getFragmentWithAction2Access();
	}
	
	public ParserRule getFragmentWithAction2Rule() {
		return getFragmentWithAction2Access().getRule();
	}

	//fragment FragmentWithAction3 returns PRFNamed:
	//	name=ID ({PRFNamedWithAction.prev=current} "->" name=ID ref2=[PRFNamed]?)*;
	public FragmentTestLanguageGrammarAccess.FragmentWithAction3Elements getFragmentWithAction3Access() {
		return gaFragmentTestLanguage.getFragmentWithAction3Access();
	}
	
	public ParserRule getFragmentWithAction3Rule() {
		return getFragmentWithAction3Access().getRule();
	}

	//fragment PRFNamedFragment returns PRFNamed:
	//	name=ID;
	public FragmentTestLanguageGrammarAccess.PRFNamedFragmentElements getPRFNamedFragmentAccess() {
		return gaFragmentTestLanguage.getPRFNamedFragmentAccess();
	}
	
	public ParserRule getPRFNamedFragmentRule() {
		return getPRFNamedFragmentAccess().getRule();
	}

	//fragment PRFNamedRef returns PRFNamed:
	//	ref=[PRFNamed];
	public FragmentTestLanguageGrammarAccess.PRFNamedRefElements getPRFNamedRefAccess() {
		return gaFragmentTestLanguage.getPRFNamedRefAccess();
	}
	
	public ParserRule getPRFNamedRefRule() {
		return getPRFNamedRefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaFragmentTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaFragmentTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaFragmentTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaFragmentTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaFragmentTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaFragmentTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaFragmentTestLanguage.getANY_OTHERRule();
	} 
}
