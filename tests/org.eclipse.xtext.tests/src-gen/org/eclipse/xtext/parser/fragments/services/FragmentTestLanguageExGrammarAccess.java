/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.fragments.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.parser.fragments.services.FragmentTestLanguageGrammarAccess;

@Singleton
public class FragmentTestLanguageExGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FragmentsExElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguageEx.FragmentsEx");
		private final RuleCall cFragmentsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FragmentsEx returns Fragments:
		//	Fragments;
		@Override public ParserRule getRule() { return rule; }

		//Fragments
		public RuleCall getFragmentsParserRuleCall() { return cFragmentsParserRuleCall; }
	}
	
	
	private final FragmentsExElements pFragmentsEx;
	
	private final Grammar grammar;

	private final FragmentTestLanguageGrammarAccess gaFragmentTestLanguage;

	@Inject
	public FragmentTestLanguageExGrammarAccess(GrammarProvider grammarProvider,
		FragmentTestLanguageGrammarAccess gaFragmentTestLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaFragmentTestLanguage = gaFragmentTestLanguage;
		this.pFragmentsEx = new FragmentsExElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.fragments.FragmentTestLanguageEx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public FragmentTestLanguageGrammarAccess getFragmentTestLanguageGrammarAccess() {
		return gaFragmentTestLanguage;
	}

	
	//FragmentsEx returns Fragments:
	//	Fragments;
	public FragmentsExElements getFragmentsExAccess() {
		return pFragmentsEx;
	}
	
	public ParserRule getFragmentsExRule() {
		return getFragmentsExAccess().getRule();
	}

	//Fragments:
	//	{Fragments} ("#1" element=Named | "#2" element=Named "->" ref=[Named] | "#3" element=NamedRefFirst | "#4"
	//	element=NamedWithAction | "#5" element=NamedWithActionInFragment | "#6" element=NamedWithActionInFragment2 | "#7"
	//	element=NamedWithActionInFragment3);
	public FragmentTestLanguageGrammarAccess.FragmentsElements getFragmentsAccess() {
		return gaFragmentTestLanguage.getFragmentsAccess();
	}
	
	public ParserRule getFragmentsRule() {
		return getFragmentsAccess().getRule();
	}

	//Named:
	//	NamedFragment (":" ref=[Named] | "-" NamedRef)?;
	public FragmentTestLanguageGrammarAccess.NamedElements getNamedAccess() {
		return gaFragmentTestLanguage.getNamedAccess();
	}
	
	public ParserRule getNamedRule() {
		return getNamedAccess().getRule();
	}

	//NamedRefFirst returns Named:
	//	ref=[Named] "<-" NamedFragment;
	public FragmentTestLanguageGrammarAccess.NamedRefFirstElements getNamedRefFirstAccess() {
		return gaFragmentTestLanguage.getNamedRefFirstAccess();
	}
	
	public ParserRule getNamedRefFirstRule() {
		return getNamedRefFirstAccess().getRule();
	}

	//NamedWithAction returns Named:
	//	Named {NamedWithAction.prev=current} name=ID (ref=[Named] ref2=[Named])?;
	public FragmentTestLanguageGrammarAccess.NamedWithActionElements getNamedWithActionAccess() {
		return gaFragmentTestLanguage.getNamedWithActionAccess();
	}
	
	public ParserRule getNamedWithActionRule() {
		return getNamedWithActionAccess().getRule();
	}

	//NamedWithActionInFragment returns Named:
	//	FragmentWithAction ("-" ref=[Named])?;
	public FragmentTestLanguageGrammarAccess.NamedWithActionInFragmentElements getNamedWithActionInFragmentAccess() {
		return gaFragmentTestLanguage.getNamedWithActionInFragmentAccess();
	}
	
	public ParserRule getNamedWithActionInFragmentRule() {
		return getNamedWithActionInFragmentAccess().getRule();
	}

	//NamedWithActionInFragment2 returns Named:
	//	name=ID FragmentWithAction2 ("-" ref=[Named])?;
	public FragmentTestLanguageGrammarAccess.NamedWithActionInFragment2Elements getNamedWithActionInFragment2Access() {
		return gaFragmentTestLanguage.getNamedWithActionInFragment2Access();
	}
	
	public ParserRule getNamedWithActionInFragment2Rule() {
		return getNamedWithActionInFragment2Access().getRule();
	}

	//NamedWithActionInFragment3 returns Named:
	//	FragmentWithAction3 ("-" ref=[Named])?;
	public FragmentTestLanguageGrammarAccess.NamedWithActionInFragment3Elements getNamedWithActionInFragment3Access() {
		return gaFragmentTestLanguage.getNamedWithActionInFragment3Access();
	}
	
	public ParserRule getNamedWithActionInFragment3Rule() {
		return getNamedWithActionInFragment3Access().getRule();
	}

	//fragment FragmentWithAction returns Named:
	//	name=ID {NamedWithAction.prev=current} name=ID ref2=[Named]?;
	public FragmentTestLanguageGrammarAccess.FragmentWithActionElements getFragmentWithActionAccess() {
		return gaFragmentTestLanguage.getFragmentWithActionAccess();
	}
	
	public ParserRule getFragmentWithActionRule() {
		return getFragmentWithActionAccess().getRule();
	}

	//fragment FragmentWithAction2 returns Named:
	//	{NamedWithAction.prev=current} name=ID ref2=[Named]?;
	public FragmentTestLanguageGrammarAccess.FragmentWithAction2Elements getFragmentWithAction2Access() {
		return gaFragmentTestLanguage.getFragmentWithAction2Access();
	}
	
	public ParserRule getFragmentWithAction2Rule() {
		return getFragmentWithAction2Access().getRule();
	}

	//fragment FragmentWithAction3 returns Named:
	//	name=ID ({NamedWithAction.prev=current} "->" name=ID ref2=[Named]?)*;
	public FragmentTestLanguageGrammarAccess.FragmentWithAction3Elements getFragmentWithAction3Access() {
		return gaFragmentTestLanguage.getFragmentWithAction3Access();
	}
	
	public ParserRule getFragmentWithAction3Rule() {
		return getFragmentWithAction3Access().getRule();
	}

	//fragment NamedFragment returns Named:
	//	name=ID;
	public FragmentTestLanguageGrammarAccess.NamedFragmentElements getNamedFragmentAccess() {
		return gaFragmentTestLanguage.getNamedFragmentAccess();
	}
	
	public ParserRule getNamedFragmentRule() {
		return getNamedFragmentAccess().getRule();
	}

	//fragment NamedRef returns Named:
	//	ref=[Named];
	public FragmentTestLanguageGrammarAccess.NamedRefElements getNamedRefAccess() {
		return gaFragmentTestLanguage.getNamedRefAccess();
	}
	
	public ParserRule getNamedRefRule() {
		return getNamedRefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaFragmentTestLanguage.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaFragmentTestLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaFragmentTestLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaFragmentTestLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaFragmentTestLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaFragmentTestLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaFragmentTestLanguage.getANY_OTHERRule();
	} 
}
