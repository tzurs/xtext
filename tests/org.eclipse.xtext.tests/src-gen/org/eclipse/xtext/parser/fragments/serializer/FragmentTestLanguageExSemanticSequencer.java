/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.fragments.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.FragmentTestLanguagePackage;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.Fragments;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.Named;
import org.eclipse.xtext.parser.fragments.fragmentTestLanguage.NamedWithAction;
import org.eclipse.xtext.parser.fragments.serializer.FragmentTestLanguageSemanticSequencer;
import org.eclipse.xtext.parser.fragments.services.FragmentTestLanguageExGrammarAccess;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public class FragmentTestLanguageExSemanticSequencer extends FragmentTestLanguageSemanticSequencer {

	@Inject
	private FragmentTestLanguageExGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == FragmentTestLanguagePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case FragmentTestLanguagePackage.FRAGMENTS:
				sequence_Fragments(context, (Fragments) semanticObject); 
				return; 
			case FragmentTestLanguagePackage.NAMED:
				if(context == grammarAccess.getFragmentWithAction3Rule() ||
				   context == grammarAccess.getFragmentWithAction3Access().getNamedWithActionPrevAction_1_0()) {
					sequence_FragmentWithAction3(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragment3Rule()) {
					sequence_FragmentWithAction3_NamedWithActionInFragment3(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFragmentWithActionAccess().getNamedWithActionPrevAction_1()) {
					sequence_FragmentWithAction_NamedWithAction_1(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedFragmentRule()) {
					sequence_NamedFragment(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedRefFirstRule()) {
					sequence_NamedFragment_NamedRefFirst(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedRefRule()) {
					sequence_NamedRef(context, (Named) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedRule() ||
				   context == grammarAccess.getNamedWithActionAccess().getNamedWithActionPrevAction_1()) {
					sequence_Named_NamedFragment_NamedRef(context, (Named) semanticObject); 
					return; 
				}
				else break;
			case FragmentTestLanguagePackage.NAMED_WITH_ACTION:
				if(context == grammarAccess.getFragmentWithAction2Rule()) {
					sequence_FragmentWithAction2(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragment2Rule()) {
					sequence_FragmentWithAction2_NamedWithActionInFragment2(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFragmentWithAction3Rule() ||
				   context == grammarAccess.getFragmentWithAction3Access().getNamedWithActionPrevAction_1_0()) {
					sequence_FragmentWithAction3(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragment3Rule()) {
					sequence_FragmentWithAction3_NamedWithActionInFragment3(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFragmentWithActionRule()) {
					sequence_FragmentWithAction(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionInFragmentRule()) {
					sequence_FragmentWithAction_NamedWithActionInFragment(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getNamedWithActionRule()) {
					sequence_NamedWithAction(context, (NamedWithAction) semanticObject); 
					return; 
				}
				else break;
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
}
