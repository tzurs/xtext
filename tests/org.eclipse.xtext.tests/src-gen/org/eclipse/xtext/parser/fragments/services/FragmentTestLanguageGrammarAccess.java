/*
 * generated by Xtext
 */
package org.eclipse.xtext.parser.fragments.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FragmentTestLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FragmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.Fragments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFragmentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cNumberSignDigitOneKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cElementAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cElementNamedParserRuleCall_1_0_1_0 = (RuleCall)cElementAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cNumberSignDigitTwoKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementNamedParserRuleCall_1_1_1_0 = (RuleCall)cElementAssignment_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cRefAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cRefNamedCrossReference_1_1_3_0 = (CrossReference)cRefAssignment_1_1_3.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_1_1_3_0_1 = (RuleCall)cRefNamedCrossReference_1_1_3_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cNumberSignDigitThreeKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cElementAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cElementNamedRefFirstParserRuleCall_1_2_1_0 = (RuleCall)cElementAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cNumberSignDigitFourKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cElementAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cElementNamedWithActionParserRuleCall_1_3_1_0 = (RuleCall)cElementAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cNumberSignDigitFiveKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cElementAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cElementNamedWithActionInFragmentParserRuleCall_1_4_1_0 = (RuleCall)cElementAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cNumberSignDigitSixKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cElementAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cElementNamedWithActionInFragment2ParserRuleCall_1_5_1_0 = (RuleCall)cElementAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cAlternatives_1.eContents().get(6);
		private final Keyword cNumberSignDigitSevenKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cElementAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cElementNamedWithActionInFragment3ParserRuleCall_1_6_1_0 = (RuleCall)cElementAssignment_1_6_1.eContents().get(0);
		
		//Fragments:
		//	{Fragments} ("#1" element=Named | "#2" element=Named "->" ref=[Named] | "#3" element=NamedRefFirst | "#4"
		//	element=NamedWithAction | "#5" element=NamedWithActionInFragment | "#6" element=NamedWithActionInFragment2 | "#7"
		//	element=NamedWithActionInFragment3);
		@Override public ParserRule getRule() { return rule; }

		//{Fragments} ("#1" element=Named | "#2" element=Named "->" ref=[Named] | "#3" element=NamedRefFirst | "#4"
		//element=NamedWithAction | "#5" element=NamedWithActionInFragment | "#6" element=NamedWithActionInFragment2 | "#7"
		//element=NamedWithActionInFragment3)
		public Group getGroup() { return cGroup; }

		//{Fragments}
		public Action getFragmentsAction_0() { return cFragmentsAction_0; }

		//"#1" element=Named | "#2" element=Named "->" ref=[Named] | "#3" element=NamedRefFirst | "#4" element=NamedWithAction |
		//"#5" element=NamedWithActionInFragment | "#6" element=NamedWithActionInFragment2 | "#7"
		//element=NamedWithActionInFragment3
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"#1" element=Named
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"#1"
		public Keyword getNumberSignDigitOneKeyword_1_0_0() { return cNumberSignDigitOneKeyword_1_0_0; }

		//element=Named
		public Assignment getElementAssignment_1_0_1() { return cElementAssignment_1_0_1; }

		//Named
		public RuleCall getElementNamedParserRuleCall_1_0_1_0() { return cElementNamedParserRuleCall_1_0_1_0; }

		//"#2" element=Named "->" ref=[Named]
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#2"
		public Keyword getNumberSignDigitTwoKeyword_1_1_0() { return cNumberSignDigitTwoKeyword_1_1_0; }

		//element=Named
		public Assignment getElementAssignment_1_1_1() { return cElementAssignment_1_1_1; }

		//Named
		public RuleCall getElementNamedParserRuleCall_1_1_1_0() { return cElementNamedParserRuleCall_1_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_1_2; }

		//ref=[Named]
		public Assignment getRefAssignment_1_1_3() { return cRefAssignment_1_1_3; }

		//[Named]
		public CrossReference getRefNamedCrossReference_1_1_3_0() { return cRefNamedCrossReference_1_1_3_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_1_1_3_0_1() { return cRefNamedIDTerminalRuleCall_1_1_3_0_1; }

		//"#3" element=NamedRefFirst
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"#3"
		public Keyword getNumberSignDigitThreeKeyword_1_2_0() { return cNumberSignDigitThreeKeyword_1_2_0; }

		//element=NamedRefFirst
		public Assignment getElementAssignment_1_2_1() { return cElementAssignment_1_2_1; }

		//NamedRefFirst
		public RuleCall getElementNamedRefFirstParserRuleCall_1_2_1_0() { return cElementNamedRefFirstParserRuleCall_1_2_1_0; }

		//"#4" element=NamedWithAction
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"#4"
		public Keyword getNumberSignDigitFourKeyword_1_3_0() { return cNumberSignDigitFourKeyword_1_3_0; }

		//element=NamedWithAction
		public Assignment getElementAssignment_1_3_1() { return cElementAssignment_1_3_1; }

		//NamedWithAction
		public RuleCall getElementNamedWithActionParserRuleCall_1_3_1_0() { return cElementNamedWithActionParserRuleCall_1_3_1_0; }

		//"#5" element=NamedWithActionInFragment
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"#5"
		public Keyword getNumberSignDigitFiveKeyword_1_4_0() { return cNumberSignDigitFiveKeyword_1_4_0; }

		//element=NamedWithActionInFragment
		public Assignment getElementAssignment_1_4_1() { return cElementAssignment_1_4_1; }

		//NamedWithActionInFragment
		public RuleCall getElementNamedWithActionInFragmentParserRuleCall_1_4_1_0() { return cElementNamedWithActionInFragmentParserRuleCall_1_4_1_0; }

		//"#6" element=NamedWithActionInFragment2
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"#6"
		public Keyword getNumberSignDigitSixKeyword_1_5_0() { return cNumberSignDigitSixKeyword_1_5_0; }

		//element=NamedWithActionInFragment2
		public Assignment getElementAssignment_1_5_1() { return cElementAssignment_1_5_1; }

		//NamedWithActionInFragment2
		public RuleCall getElementNamedWithActionInFragment2ParserRuleCall_1_5_1_0() { return cElementNamedWithActionInFragment2ParserRuleCall_1_5_1_0; }

		//"#7" element=NamedWithActionInFragment3
		public Group getGroup_1_6() { return cGroup_1_6; }

		//"#7"
		public Keyword getNumberSignDigitSevenKeyword_1_6_0() { return cNumberSignDigitSevenKeyword_1_6_0; }

		//element=NamedWithActionInFragment3
		public Assignment getElementAssignment_1_6_1() { return cElementAssignment_1_6_1; }

		//NamedWithActionInFragment3
		public RuleCall getElementNamedWithActionInFragment3ParserRuleCall_1_6_1_0() { return cElementNamedWithActionInFragment3ParserRuleCall_1_6_1_0; }
	}

	public class NamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.Named");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNamedFragmentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cRefNamedCrossReference_1_0_1_0 = (CrossReference)cRefAssignment_1_0_1.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cRefNamedCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cNamedRefParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//Named:
		//	NamedFragment (":" ref=[Named] | "-" NamedRef)?;
		@Override public ParserRule getRule() { return rule; }

		//NamedFragment (":" ref=[Named] | "-" NamedRef)?
		public Group getGroup() { return cGroup; }

		//NamedFragment
		public RuleCall getNamedFragmentParserRuleCall_0() { return cNamedFragmentParserRuleCall_0; }

		//(":" ref=[Named] | "-" NamedRef)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//":" ref=[Named]
		public Group getGroup_1_0() { return cGroup_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }

		//ref=[Named]
		public Assignment getRefAssignment_1_0_1() { return cRefAssignment_1_0_1; }

		//[Named]
		public CrossReference getRefNamedCrossReference_1_0_1_0() { return cRefNamedCrossReference_1_0_1_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_1_0_1_0_1() { return cRefNamedIDTerminalRuleCall_1_0_1_0_1; }

		//"-" NamedRef
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }

		//NamedRef
		public RuleCall getNamedRefParserRuleCall_1_1_1() { return cNamedRefParserRuleCall_1_1_1; }
	}

	public class NamedRefFirstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedRefFirst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefNamedCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_0_0_1 = (RuleCall)cRefNamedCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNamedFragmentParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NamedRefFirst returns Named:
		//	ref=[Named] "<-" NamedFragment;
		@Override public ParserRule getRule() { return rule; }

		//ref=[Named] "<-" NamedFragment
		public Group getGroup() { return cGroup; }

		//ref=[Named]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Named]
		public CrossReference getRefNamedCrossReference_0_0() { return cRefNamedCrossReference_0_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_0_0_1() { return cRefNamedIDTerminalRuleCall_0_0_1; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }

		//NamedFragment
		public RuleCall getNamedFragmentParserRuleCall_2() { return cNamedFragmentParserRuleCall_2; }
	}

	public class NamedWithActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedWithAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNamedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cNamedWithActionPrevAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRefNamedCrossReference_3_0_0 = (CrossReference)cRefAssignment_3_0.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRefNamedCrossReference_3_0_0.eContents().get(1);
		private final Assignment cRef2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRef2NamedCrossReference_3_1_0 = (CrossReference)cRef2Assignment_3_1.eContents().get(0);
		private final RuleCall cRef2NamedIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRef2NamedCrossReference_3_1_0.eContents().get(1);
		
		//NamedWithAction returns Named:
		//	Named {NamedWithAction.prev=current} name=ID (ref=[Named] ref2=[Named])?;
		@Override public ParserRule getRule() { return rule; }

		//Named {NamedWithAction.prev=current} name=ID (ref=[Named] ref2=[Named])?
		public Group getGroup() { return cGroup; }

		//Named
		public RuleCall getNamedParserRuleCall_0() { return cNamedParserRuleCall_0; }

		//{NamedWithAction.prev=current}
		public Action getNamedWithActionPrevAction_1() { return cNamedWithActionPrevAction_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//(ref=[Named] ref2=[Named])?
		public Group getGroup_3() { return cGroup_3; }

		//ref=[Named]
		public Assignment getRefAssignment_3_0() { return cRefAssignment_3_0; }

		//[Named]
		public CrossReference getRefNamedCrossReference_3_0_0() { return cRefNamedCrossReference_3_0_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_3_0_0_1() { return cRefNamedIDTerminalRuleCall_3_0_0_1; }

		//ref2=[Named]
		public Assignment getRef2Assignment_3_1() { return cRef2Assignment_3_1; }

		//[Named]
		public CrossReference getRef2NamedCrossReference_3_1_0() { return cRef2NamedCrossReference_3_1_0; }

		//ID
		public RuleCall getRef2NamedIDTerminalRuleCall_3_1_0_1() { return cRef2NamedIDTerminalRuleCall_3_1_0_1; }
	}

	public class NamedWithActionInFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedWithActionInFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFragmentWithActionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefNamedCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefNamedCrossReference_1_1_0.eContents().get(1);
		
		//NamedWithActionInFragment returns Named:
		//	FragmentWithAction ("-" ref=[Named])?;
		@Override public ParserRule getRule() { return rule; }

		//FragmentWithAction ("-" ref=[Named])?
		public Group getGroup() { return cGroup; }

		//FragmentWithAction
		public RuleCall getFragmentWithActionParserRuleCall_0() { return cFragmentWithActionParserRuleCall_0; }

		//("-" ref=[Named])?
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//ref=[Named]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//[Named]
		public CrossReference getRefNamedCrossReference_1_1_0() { return cRefNamedCrossReference_1_1_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_1_1_0_1() { return cRefNamedIDTerminalRuleCall_1_1_0_1; }
	}

	public class NamedWithActionInFragment2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedWithActionInFragment2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cFragmentWithAction2ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefNamedCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefNamedCrossReference_2_1_0.eContents().get(1);
		
		//NamedWithActionInFragment2 returns Named:
		//	name=ID FragmentWithAction2 ("-" ref=[Named])?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID FragmentWithAction2 ("-" ref=[Named])?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//FragmentWithAction2
		public RuleCall getFragmentWithAction2ParserRuleCall_1() { return cFragmentWithAction2ParserRuleCall_1; }

		//("-" ref=[Named])?
		public Group getGroup_2() { return cGroup_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }

		//ref=[Named]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[Named]
		public CrossReference getRefNamedCrossReference_2_1_0() { return cRefNamedCrossReference_2_1_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_2_1_0_1() { return cRefNamedIDTerminalRuleCall_2_1_0_1; }
	}

	public class NamedWithActionInFragment3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedWithActionInFragment3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFragmentWithAction3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefNamedCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefNamedCrossReference_1_1_0.eContents().get(1);
		
		//NamedWithActionInFragment3 returns Named:
		//	FragmentWithAction3 ("-" ref=[Named])?;
		@Override public ParserRule getRule() { return rule; }

		//FragmentWithAction3 ("-" ref=[Named])?
		public Group getGroup() { return cGroup; }

		//FragmentWithAction3
		public RuleCall getFragmentWithAction3ParserRuleCall_0() { return cFragmentWithAction3ParserRuleCall_0; }

		//("-" ref=[Named])?
		public Group getGroup_1() { return cGroup_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//ref=[Named]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//[Named]
		public CrossReference getRefNamedCrossReference_1_1_0() { return cRefNamedCrossReference_1_1_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_1_1_0_1() { return cRefNamedIDTerminalRuleCall_1_1_0_1; }
	}

	public class FragmentWithActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.FragmentWithAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Action cNamedWithActionPrevAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cRef2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRef2NamedCrossReference_3_0 = (CrossReference)cRef2Assignment_3.eContents().get(0);
		private final RuleCall cRef2NamedIDTerminalRuleCall_3_0_1 = (RuleCall)cRef2NamedCrossReference_3_0.eContents().get(1);
		
		//fragment FragmentWithAction returns Named:
		//	name=ID {NamedWithAction.prev=current} name=ID ref2=[Named]?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID {NamedWithAction.prev=current} name=ID ref2=[Named]?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//{NamedWithAction.prev=current}
		public Action getNamedWithActionPrevAction_1() { return cNamedWithActionPrevAction_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//ref2=[Named]?
		public Assignment getRef2Assignment_3() { return cRef2Assignment_3; }

		//[Named]
		public CrossReference getRef2NamedCrossReference_3_0() { return cRef2NamedCrossReference_3_0; }

		//ID
		public RuleCall getRef2NamedIDTerminalRuleCall_3_0_1() { return cRef2NamedIDTerminalRuleCall_3_0_1; }
	}

	public class FragmentWithAction2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.FragmentWithAction2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamedWithActionPrevAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRef2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRef2NamedCrossReference_2_0 = (CrossReference)cRef2Assignment_2.eContents().get(0);
		private final RuleCall cRef2NamedIDTerminalRuleCall_2_0_1 = (RuleCall)cRef2NamedCrossReference_2_0.eContents().get(1);
		
		//fragment FragmentWithAction2 returns Named:
		//	{NamedWithAction.prev=current} name=ID ref2=[Named]?;
		@Override public ParserRule getRule() { return rule; }

		//{NamedWithAction.prev=current} name=ID ref2=[Named]?
		public Group getGroup() { return cGroup; }

		//{NamedWithAction.prev=current}
		public Action getNamedWithActionPrevAction_0() { return cNamedWithActionPrevAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//ref2=[Named]?
		public Assignment getRef2Assignment_2() { return cRef2Assignment_2; }

		//[Named]
		public CrossReference getRef2NamedCrossReference_2_0() { return cRef2NamedCrossReference_2_0; }

		//ID
		public RuleCall getRef2NamedIDTerminalRuleCall_2_0_1() { return cRef2NamedIDTerminalRuleCall_2_0_1; }
	}

	public class FragmentWithAction3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.FragmentWithAction3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNamedWithActionPrevAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Assignment cRef2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cRef2NamedCrossReference_1_3_0 = (CrossReference)cRef2Assignment_1_3.eContents().get(0);
		private final RuleCall cRef2NamedIDTerminalRuleCall_1_3_0_1 = (RuleCall)cRef2NamedCrossReference_1_3_0.eContents().get(1);
		
		//fragment FragmentWithAction3 returns Named:
		//	name=ID ({NamedWithAction.prev=current} "->" name=ID ref2=[Named]?)*;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ({NamedWithAction.prev=current} "->" name=ID ref2=[Named]?)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//({NamedWithAction.prev=current} "->" name=ID ref2=[Named]?)*
		public Group getGroup_1() { return cGroup_1; }

		//{NamedWithAction.prev=current}
		public Action getNamedWithActionPrevAction_1_0() { return cNamedWithActionPrevAction_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }

		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }

		//ref2=[Named]?
		public Assignment getRef2Assignment_1_3() { return cRef2Assignment_1_3; }

		//[Named]
		public CrossReference getRef2NamedCrossReference_1_3_0() { return cRef2NamedCrossReference_1_3_0; }

		//ID
		public RuleCall getRef2NamedIDTerminalRuleCall_1_3_0_1() { return cRef2NamedIDTerminalRuleCall_1_3_0_1; }
	}

	public class NamedFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedFragment");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//fragment NamedFragment returns Named:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class NamedRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.xtext.parser.fragments.FragmentTestLanguage.NamedRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefNamedCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefNamedIDTerminalRuleCall_0_1 = (RuleCall)cRefNamedCrossReference_0.eContents().get(1);
		
		//fragment NamedRef returns Named:
		//	ref=[Named];
		@Override public ParserRule getRule() { return rule; }

		//ref=[Named]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Named]
		public CrossReference getRefNamedCrossReference_0() { return cRefNamedCrossReference_0; }

		//ID
		public RuleCall getRefNamedIDTerminalRuleCall_0_1() { return cRefNamedIDTerminalRuleCall_0_1; }
	}
	
	
	private final FragmentsElements pFragments;
	private final NamedElements pNamed;
	private final NamedRefFirstElements pNamedRefFirst;
	private final NamedWithActionElements pNamedWithAction;
	private final NamedWithActionInFragmentElements pNamedWithActionInFragment;
	private final NamedWithActionInFragment2Elements pNamedWithActionInFragment2;
	private final NamedWithActionInFragment3Elements pNamedWithActionInFragment3;
	private final FragmentWithActionElements pFragmentWithAction;
	private final FragmentWithAction2Elements pFragmentWithAction2;
	private final FragmentWithAction3Elements pFragmentWithAction3;
	private final NamedFragmentElements pNamedFragment;
	private final NamedRefElements pNamedRef;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FragmentTestLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFragments = new FragmentsElements();
		this.pNamed = new NamedElements();
		this.pNamedRefFirst = new NamedRefFirstElements();
		this.pNamedWithAction = new NamedWithActionElements();
		this.pNamedWithActionInFragment = new NamedWithActionInFragmentElements();
		this.pNamedWithActionInFragment2 = new NamedWithActionInFragment2Elements();
		this.pNamedWithActionInFragment3 = new NamedWithActionInFragment3Elements();
		this.pFragmentWithAction = new FragmentWithActionElements();
		this.pFragmentWithAction2 = new FragmentWithAction2Elements();
		this.pFragmentWithAction3 = new FragmentWithAction3Elements();
		this.pNamedFragment = new NamedFragmentElements();
		this.pNamedRef = new NamedRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.xtext.parser.fragments.FragmentTestLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Fragments:
	//	{Fragments} ("#1" element=Named | "#2" element=Named "->" ref=[Named] | "#3" element=NamedRefFirst | "#4"
	//	element=NamedWithAction | "#5" element=NamedWithActionInFragment | "#6" element=NamedWithActionInFragment2 | "#7"
	//	element=NamedWithActionInFragment3);
	public FragmentsElements getFragmentsAccess() {
		return pFragments;
	}
	
	public ParserRule getFragmentsRule() {
		return getFragmentsAccess().getRule();
	}

	//Named:
	//	NamedFragment (":" ref=[Named] | "-" NamedRef)?;
	public NamedElements getNamedAccess() {
		return pNamed;
	}
	
	public ParserRule getNamedRule() {
		return getNamedAccess().getRule();
	}

	//NamedRefFirst returns Named:
	//	ref=[Named] "<-" NamedFragment;
	public NamedRefFirstElements getNamedRefFirstAccess() {
		return pNamedRefFirst;
	}
	
	public ParserRule getNamedRefFirstRule() {
		return getNamedRefFirstAccess().getRule();
	}

	//NamedWithAction returns Named:
	//	Named {NamedWithAction.prev=current} name=ID (ref=[Named] ref2=[Named])?;
	public NamedWithActionElements getNamedWithActionAccess() {
		return pNamedWithAction;
	}
	
	public ParserRule getNamedWithActionRule() {
		return getNamedWithActionAccess().getRule();
	}

	//NamedWithActionInFragment returns Named:
	//	FragmentWithAction ("-" ref=[Named])?;
	public NamedWithActionInFragmentElements getNamedWithActionInFragmentAccess() {
		return pNamedWithActionInFragment;
	}
	
	public ParserRule getNamedWithActionInFragmentRule() {
		return getNamedWithActionInFragmentAccess().getRule();
	}

	//NamedWithActionInFragment2 returns Named:
	//	name=ID FragmentWithAction2 ("-" ref=[Named])?;
	public NamedWithActionInFragment2Elements getNamedWithActionInFragment2Access() {
		return pNamedWithActionInFragment2;
	}
	
	public ParserRule getNamedWithActionInFragment2Rule() {
		return getNamedWithActionInFragment2Access().getRule();
	}

	//NamedWithActionInFragment3 returns Named:
	//	FragmentWithAction3 ("-" ref=[Named])?;
	public NamedWithActionInFragment3Elements getNamedWithActionInFragment3Access() {
		return pNamedWithActionInFragment3;
	}
	
	public ParserRule getNamedWithActionInFragment3Rule() {
		return getNamedWithActionInFragment3Access().getRule();
	}

	//fragment FragmentWithAction returns Named:
	//	name=ID {NamedWithAction.prev=current} name=ID ref2=[Named]?;
	public FragmentWithActionElements getFragmentWithActionAccess() {
		return pFragmentWithAction;
	}
	
	public ParserRule getFragmentWithActionRule() {
		return getFragmentWithActionAccess().getRule();
	}

	//fragment FragmentWithAction2 returns Named:
	//	{NamedWithAction.prev=current} name=ID ref2=[Named]?;
	public FragmentWithAction2Elements getFragmentWithAction2Access() {
		return pFragmentWithAction2;
	}
	
	public ParserRule getFragmentWithAction2Rule() {
		return getFragmentWithAction2Access().getRule();
	}

	//fragment FragmentWithAction3 returns Named:
	//	name=ID ({NamedWithAction.prev=current} "->" name=ID ref2=[Named]?)*;
	public FragmentWithAction3Elements getFragmentWithAction3Access() {
		return pFragmentWithAction3;
	}
	
	public ParserRule getFragmentWithAction3Rule() {
		return getFragmentWithAction3Access().getRule();
	}

	//fragment NamedFragment returns Named:
	//	name=ID;
	public NamedFragmentElements getNamedFragmentAccess() {
		return pNamedFragment;
	}
	
	public ParserRule getNamedFragmentRule() {
		return getNamedFragmentAccess().getRule();
	}

	//fragment NamedRef returns Named:
	//	ref=[Named];
	public NamedRefElements getNamedRefAccess() {
		return pNamedRef;
	}
	
	public ParserRule getNamedRefRule() {
		return getNamedRefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
