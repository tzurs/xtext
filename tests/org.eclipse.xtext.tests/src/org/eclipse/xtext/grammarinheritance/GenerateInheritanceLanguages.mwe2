/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
module org.eclipse.xtext.grammarinheritance.GenerateInheritanceLanguages

import org.eclipse.emf.mwe2.runtime.workflow.Workflow
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.*
import org.eclipse.xtext.generator.*

var projectName = "org.eclipse.xtext.tests"
var runtimeProject = "../${projectName}"
var lineDelimiter = '\n'

Workflow {
	bean = StandaloneSetup {
		ignoreBrokenProjectFiles = true
		platformUri = "${runtimeProject}/../.."
		scanClassPath = true
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}
		registerGenModelFile = "platform:/resource/${projectName}/src/org/eclipse/xtext/grammarinheritance/ametamodel.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		registerGeneratedEPackage = "org.eclipse.xtext.grammarinheritance.ametamodel.AmetamodelPackage"
	}
	
	component = DirectoryCleaner {
		directory="${runtimeProject}/src-gen/org/eclipse/xtext/grammarinheritance"
	}
	component = DirectoryCleaner {
		directory="${runtimeProject}/../../intellij/org.eclipse.xtext.core.idea.tests/src-gen/org/eclipse/xtext/grammarinheritance/idea"
	}
	
	component = Generator auto-inject {
		pathRtProject = runtimeProject
		projectNameRt = projectName
		language = {
			uri = "classpath:/org/eclipse/xtext/grammarinheritance/AbstractTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				srcGenOnly = false
			}
		}
		language = {
			uri = "classpath:/org/eclipse/xtext/grammarinheritance/BaseInheritanceTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			uri = "classpath:/org/eclipse/xtext/grammarinheritance/ConcreteTestLanguage.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			uri = "classpath:/org/eclipse/xtext/grammarinheritance/InheritanceTestLanguage.xtext"
			fragment = @TestLanguagesFragments {
				srcGenOnly = false
			}
		}
		language = {
			uri = "classpath:/org/eclipse/xtext/grammarinheritance/InheritanceTest2Language.xtext"
			fragment = @TestLanguagesFragments {}
		}
		language = {
			uri = "classpath:/org/eclipse/xtext/grammarinheritance/InheritanceTest3Language.xtext"
			fragment = @TestLanguagesFragments {}
		}
	}
}
